{"ast":null,"code":"var _jsxFileName = \"/Users/nicolascarchio/Desktop/when_will_i_run_out/src/app/Step2.js\";\nimport React, { Component } from \"react\";\nimport FormStep2 from '../classes/FormStep2';\nimport history from '../classes/history';\nimport { grainQuantities, vegQuantities, fruitQuantities, dairyQuantities, proteinQuantities } from '../classes/foodLabels_Values';\n\nfunction howLongWillItLast(grains, veg, fruit, dairy, protein, grainsCount, vegCount, fruitCount, dairyCount, proteinCount) {\n  return [{\n    daysOfGrains: +(grainsCount / grains),\n    daysOfVeg: +(vegCount / veg),\n    daysOfFruit: +(fruitCount / fruit),\n    daysOfDairy: +(dairyCount / dairy),\n    daysOfProtein: +(proteinCount, protein)\n  }];\n}\n\nexport default class Step2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      foodList: [],\n      grainsCount: 0,\n      vegCount: 0,\n      fruitCount: 0,\n      dairyCount: 0,\n      proteinCount: 0\n    };\n\n    this.onSubmit = foodList => {\n      var entry = foodList;\n      var newFields = this.state.foodList;\n      newFields.push(entry);\n      console.log(\"quant: \", foodList.quantity);\n      this.setState({\n        grainsList: newFields\n      }); // now set label\n      // if grain\n\n      if (grainQuantities[foodList.type]) {\n        this.setState({\n          grainsCount: +this.state.grainsCount + +foodList.quantity * +grainQuantities[foodList.type]\n        });\n      } // if veg\n      else if (vegQuantities[foodList.type]) {\n          this.setState({\n            vegCount: +this.state.vegCount + +foodList.quantity * +vegQuantities[foodList.type]\n          });\n        } // if fruit\n        else if (fruitQuantities[foodList.type]) {\n            this.setState({\n              fruitCount: +this.state.fruitCount + +foodList.quantity * +fruitQuantities[foodList.type]\n            });\n          } // if dairy\n          else if (dairyQuantities[foodList.type]) {\n              this.setState({\n                dairyCount: +this.state.dairyCount + +foodList.quantity * +dairyQuantities[foodList.type]\n              });\n            } // if protein\n            else if (proteinQuantities[foodList.type]) {\n                this.setState({\n                  proteinCount: +this.state.proteinCount + +foodList.quantity * +proteinQuantities[foodList.type]\n                });\n              }\n\n      console.log(\"this.state.grainsCount\", +this.state.grainsCount);\n    };\n\n    this.continueToStep3 = e => {\n      const {\n        famData\n      } = this.props.location;\n      console.log('Family data: ' + famData);\n      var willItLast = howLongWillItLast(famData[0].grains, 0, famData[0].fruit, 0, 0, this.state.grainsCount, 0, 0, 0, 0); // go to next page\n\n      history.push({\n        pathname: '/Step3',\n        willItLast: willItLast\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Step2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormStep2, {\n      onSubmit: foodList => this.onSubmit(foodList),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, JSON.stringify(this.state.foodList, null, 2)), \" ---> (grains list) table here\", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, JSON.stringify(this.state.foodList, null, 2)), \" ---> (grains count) count here\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.continueToStep3(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, \"Calculate When I Will Run Out of Food!\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/nicolascarchio/Desktop/when_will_i_run_out/src/app/Step2.js"],"names":["React","Component","FormStep2","history","grainQuantities","vegQuantities","fruitQuantities","dairyQuantities","proteinQuantities","howLongWillItLast","grains","veg","fruit","dairy","protein","grainsCount","vegCount","fruitCount","dairyCount","proteinCount","daysOfGrains","daysOfVeg","daysOfFruit","daysOfDairy","daysOfProtein","Step2","state","foodList","onSubmit","entry","newFields","push","console","log","quantity","setState","grainsList","type","continueToStep3","e","famData","props","location","willItLast","pathname","render","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FormStep2 from '../classes/FormStep2'; \nimport history from '../classes/history'; \nimport { grainQuantities, vegQuantities, fruitQuantities, dairyQuantities, proteinQuantities } from '../classes/foodLabels_Values'\n\n\nfunction howLongWillItLast(grains, veg, fruit, dairy, protein, grainsCount, vegCount, fruitCount, dairyCount, proteinCount) {\n    return [{\n        daysOfGrains: +(grainsCount / grains), \n        daysOfVeg: +(vegCount / veg), \n        daysOfFruit: +(fruitCount / fruit), \n        daysOfDairy: +(dairyCount / dairy), \n        daysOfProtein: +(proteinCount, protein)\n    }]; \n}\n\nexport default class Step2 extends React.Component {\n    state = {\n        foodList: [], \n        grainsCount: 0, \n        vegCount: 0, \n        fruitCount: 0, \n        dairyCount: 0, \n        proteinCount: 0\n    }\n\n    onSubmit = (foodList) => {\n        var entry = foodList\n        var newFields = this.state.foodList; \n        newFields.push(entry); \n        console.log(\"quant: \", foodList.quantity); \n        this.setState({ \n            grainsList: newFields, \n         })\n         // now set label\n        // if grain\n        if (grainQuantities[foodList.type]) {\n            this.setState({\n                grainsCount: (+this.state.grainsCount) + (+foodList.quantity) * (+grainQuantities[foodList.type])\n            }); \n        } // if veg\n        else if (vegQuantities[foodList.type]) {\n            this.setState({\n                vegCount: (+this.state.vegCount) + (+foodList.quantity) * (+vegQuantities[foodList.type])\n            });\n        }// if fruit\n        else if (fruitQuantities[foodList.type]) {\n            this.setState({\n                fruitCount: (+this.state.fruitCount) + (+foodList.quantity) * (+fruitQuantities[foodList.type])\n            });\n\n        }// if dairy\n        else if (dairyQuantities[foodList.type]) {\n            this.setState({\n                dairyCount: (+this.state.dairyCount) + (+foodList.quantity) * (+dairyQuantities[foodList.type])\n            });\n\n        }// if protein\n        else if (proteinQuantities[foodList.type]) {\n            this.setState({\n                proteinCount: (+this.state.proteinCount) + (+foodList.quantity) * (+proteinQuantities[foodList.type])\n            });\n\n        }\n\n\n\n\n\n\n        console.log(\"this.state.grainsCount\", +this.state.grainsCount); \n\n    }; \n\n    /**\n   * Transitions to step 3\n   */\n  continueToStep3 = (e) => {\n    const {famData} = this.props.location; \n    console.log('Family data: ' + famData);\n    var willItLast = howLongWillItLast(famData[0].grains, 0, famData[0].fruit, 0, 0, this.state.grainsCount, 0, 0, 0, 0); \n    // go to next page\n    history.push({\n        pathname: ('/Step3'), \n        willItLast: willItLast\n      });   \n  }; \n    \n    render() {\n        return (\n            <div className=\"Step2\">\n                <FormStep2 onSubmit={foodList => this.onSubmit(foodList)}/>\n                <p>{JSON.stringify(this.state.foodList, null, 2)}</p> ---> (grains list) table here\n                <p>{JSON.stringify(this.state.foodList, null, 2)}</p> ---> (grains count) count here\n                {/* <p>{JSON.stringify(this.props.state.familyMembers[0], null, 5)}</p> ---> table here */}\n                <button onClick={e => this.continueToStep3(e)}>Calculate When I Will Run Out of Food!</button>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}